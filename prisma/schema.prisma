generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement()) @map("id")
  username     String        @unique @map("username")
  avatarUrl    String?       @map("avatar_url")
  email        String        @unique @map("email")
  password     String        @map("password")
  isRegistered Boolean       @default(true) @map("is_registered")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  valid        Boolean       @default(true) @map("valid")
  lobbies      Lobby[]       @relation("UserLobbies")
  participants Participant[] @relation("UserParticipants")
  quizzes      Quiz[]        @relation("UserQuizzes")

  @@map("users")
}

model Quiz {
  id           Int        @id @default(autoincrement()) @map("id")
  title        String     @map("title")
  description  String?    @map("description")
  creatorId    Int        @map("creator_id")
  isPublic     Boolean    @default(false) @map("is_public")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  valid        Boolean    @default(true) @map("valid")
  parentQuizId Int?       @map("parent_quiz_id")
  version      Int        @default(1) @map("version")
  lobbies      Lobby[]    @relation("QuizLobbies")
  questions    Question[] @relation("QuizQuestions")
  creator      User       @relation("UserQuizzes", fields: [creatorId], references: [id], onUpdate: NoAction)
  parentQuiz   Quiz?      @relation("QuizVersions", fields: [parentQuizId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  versions     Quiz[]     @relation("QuizVersions")

  @@map("quizzes")
}

model Question {
  id                 Int                 @id @default(autoincrement()) @map("id")
  quizId             Int                 @map("quiz_id")
  questionText       String              @map("question_text")
  image              String?             @map("image")
  orderNum           Int                 @map("order_num")
  questionType       String              @default("SINGLE_CHOICE") @map("question_type")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  valid              Boolean             @default(true) @map("valid")
  answers            Answer[]            @relation("QuestionAnswers")
  participantAnswers ParticipantAnswer[] @relation("QuestionParticipantAnswers")
  quiz               Quiz                @relation("QuizQuestions", fields: [quizId], references: [id])

  @@map("questions")
}

model Answer {
  id                 Int                 @id @default(autoincrement()) @map("id")
  questionId         Int                 @map("question_id")
  answerText         String              @map("answer_text")
  isCorrect          Boolean             @default(false) @map("is_correct")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  valid              Boolean             @default(true) @map("valid")
  question           Question            @relation("QuestionAnswers", fields: [questionId], references: [id])
  participantAnswers ParticipantAnswer[] @relation("AnswerParticipantAnswers")

  @@map("answers")
}

model Lobby {
  id                 Int           @id @default(autoincrement()) @map("id")
  quizId             Int           @map("quiz_id")
  hostId             Int           @map("host_id")
  state              String        @default("IN_LOBBY") @map("state")
  joinCode           String        @unique @map("join_code")
  timeToAnswer       Int           @default(30) @map("time_to_answer")
  isRandomOrder      Boolean       @default(false) @map("is_random_order")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  valid              Boolean       @default(true) @map("valid")
  currentQuestionIdx Int?          @map("current_question_idx")
  questionStartedAt  DateTime?     @map("question_started_at")
  isPublic           Boolean       @default(false) @map("is_public")
  host               User          @relation("UserLobbies", fields: [hostId], references: [id], onUpdate: NoAction)
  quiz               Quiz          @relation("QuizLobbies", fields: [quizId], references: [id])
  participants       Participant[] @relation("LobbyParticipants")

  @@map("lobbies")
}

model Participant {
  id                 Int                 @id @default(autoincrement()) @map("id")
  username           String              @map("username")
  score              Int                 @default(0) @map("score")
  userId             Int?                @map("user_id")
  lobbyId            Int                 @map("lobby_id")
  sessionToken       String              @unique @map("session_token")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  valid              Boolean             @default(true) @map("valid")
  participantAnswers ParticipantAnswer[] @relation("ParticipantAnswers")
  lobby              Lobby               @relation("LobbyParticipants", fields: [lobbyId], references: [id])
  user               User?               @relation("UserParticipants", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([lobbyId, username])
  @@map("participants")
}

model ParticipantAnswer {
  id            Int         @id @default(autoincrement()) @map("id")
  participantId Int         @map("participant_id")
  questionId    Int         @map("question_id")
  answerId      Int?        @map("answer_id")
  timeToAnswer  Int         @map("time_to_answer") // Time in seconds taken by participant
  points        Int         @default(0) @map("points") // Points awarded for this answer
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  valid         Boolean     @default(true) @map("valid")
  answer        Answer?     @relation("AnswerParticipantAnswers", fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  participant   Participant @relation("ParticipantAnswers", fields: [participantId], references: [id], onUpdate: NoAction)
  question      Question    @relation("QuestionParticipantAnswers", fields: [questionId], references: [id], onUpdate: NoAction)

  @@map("participant_answers")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B617DBE3513") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}
